<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Tymon\JWTAuth\Facades\JWTAuth;
use Tymon\JWTAuth\Exceptions\JWTException;

class AuthController extends Controller
{
    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'username' => 'required|string|unique:users',
            'password' => 'required|string|min:6',
        ]);

        if ($validator->fails()) {
            return response()->json($validator->errors(), 400);
        }

        $user = User::create([
            'username' => $request->username,
            'password' => Hash::make($request->password),
        ]);

        return response()->json(['message' => 'User registered'], 201);
    }

    public function login(Request $request)
    {
        $credentials = $request->only('username', 'password');

        try {
            if (!$token = JWTAuth::attempt($credentials)) {
                return response()->json(['error' => 'Unauthorized'], 401);
            }
        } catch (JWTException $e) {
            return response()->json(['error' => 'Could not create token'], 500);
        }

        return response()->json(compact('token'));
    }

    public function logout()
    {
        JWTAuth::invalidate(JWTAuth::getToken());
        return response()->json(['message' => 'Logged out'], 200);
    }
}



<?php

namespace App\Http\Controllers;

use App\Models\Todo;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class TodoController extends Controller
{
    public function getTodos()
    {
        $todos = Todo::all();
        return response()->json(['todos' => $todos]);
    }

    public function getMyTodos()
    {
        $todos = Auth::user()->todos;
        return response()->json(['todos' => $todos]);
    }

    public function addTodo(Request $request)
    {
        $request->validate(['title' => 'required|string']);

        $todo = Todo::create([
            'title' => $request->title,
            'user_id' => Auth::id(),
        ]);

        return response()->json(['todo' => $todo], 201);
    }

    public function editTodo(Request $request)
    {
        $request->validate(['id' => 'required|integer', 'title' => 'required|string']);
        $todo = Todo::find($request->id);

        if ($todo && $todo->user_id === Auth::id()) {
            $todo->update(['title' => $request->title]);
            return response()->json(['message' => 'Todo updated']);
        }

        return response()->json(['error' => 'Todo not found or not authorized'], 404);
    }

    public function deleteTodo($id)
    {
        $todo = Todo::find($id);

        if ($todo && $todo->user_id === Auth::id()) {
            $todo->delete();
            return response()->json(['message' => 'Todo deleted']);
        }

        return response()->json(['error' => 'Todo not found or not authorized'], 404);
    }
}



<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Todo extends Model
{
    use HasFactory;

    protected $fillable = ['title', 'completed', 'user_id'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}


<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Tymon\JWTAuth\Contracts\JWTSubject;

class User extends Authenticatable implements JWTSubject
{
    use HasFactory;

    protected $fillable = ['username', 'password'];

    protected $hidden = ['password'];

    // JWT methods
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    public function getJWTCustomClaims()
    {
        return [];
    }
}



<?php
use App\Http\Controllers\AuthController;
use App\Http\Controllers\TodoController;
use Illuminate\Support\Facades\Route;

Route::post('/register', [AuthController::class, 'register']);
Route::post('/login', [AuthController::class, 'login']);
Route::post('/logout', [AuthController::class, 'logout']);

Route::group(['middleware' => ['jwt.auth']], function () {
    Route::get('/todos', [TodoController::class, 'getTodos']);
    Route::get('/mytodos', [TodoController::class, 'getMyTodos']);
    Route::post('/add', [TodoController::class, 'addTodo']);
    Route::post('/edit', [TodoController::class, 'editTodo']);
    Route::delete('/delete/{id}', [TodoController::class, 'deleteTodo']);
});